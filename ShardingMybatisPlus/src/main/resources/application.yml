spring:
  datasource:
    # 动态数据源配置
    dynamic:
      datasource:
        master:
          type: com.zaxxer.hikari.HikariDataSource
          driver-class-name: com.mysql.cj.jdbc.Driver
          url: jdbc:mysql://127.0.0.1:3306/db1?serverTimezone=UTC&useUnicode=true&characterEncoding=utf8&characterSetResults=utf8&useSSL=false&verifyServerCertificate=false&autoReconnct=true&autoReconnectForPools=true&allowMultiQueries=true
          username: root
          password: root
        slave: #业务数据库
          driver-class-name: org.h2.Driver
          url: jdbc:h2:mem:test;DB_CLOSE_DELAY=-1
          #生产环境最好存秘钥，连接数据库时再解密处理
          username: sa
          #连接密码
          password:
      # 指定默认数据源名称
      primary: master
  # 分表配置
  shardingsphere:
    datasource:
      names: sharding-order-system
      sharding-order-system:
        type: com.zaxxer.hikari.HikariDataSource
        driverClassName: com.mysql.cj.jdbc.Driver
        jdbcUrl: jdbc:mysql://127.0.0.1:3306/db1?serverTimezone=UTC&useUnicode=true&characterEncoding=utf8&characterSetResults=utf8&useSSL=false&verifyServerCertificate=false&autoReconnct=true&autoReconnectForPools=true&allowMultiQueries=true
        username: root
        password: root
#        jdbcUrl: jdbc:mysql://112.74.93.114:3306/risk2_bak?useUnicode=true&characterEncoding=utf8&allowMultiQueries=true&zeroDateTimeBehavior=convertToNull&serverTimezone=GMT%2B8
#        username: root
#        password: MyNewPass4!
    props:
      # 日志显示SQL
      sql.show: true
    sharding:
      tables:
        o_repayment_plan:
          # groovy语法
          # 根据年月分表
          actual-data-nodes: sharding-order-system.o_repayment_plan_$->{2022}$->{(1..2).collect{t ->t.toString().padLeft(2,'0')}}
          table-strategy:
            inline:
              sharding-column: sharding
              algorithm-expression: o_repayment_plan_$->{sharding}
          key-generator:
            column: plan_id
            type: SNOWFLAKE
        # 订单表
        t_order:
          # 真实表 t_order_0
#          actualDataNodes: sharding-order-system.t_order$->{0..1}
          # 表名称example: t_order_202201, (0..1)会根据0补充成两位数
          actual-data-nodes: sharding-order-system.t_order_$->{2022}$->{(0..1).collect{t ->t.toString().padLeft(2,'0')}}
          # 分库策略
#          databaseStrategy:
#            none:
          # 分表策略
          tableStrategy:
            inline:
              shardingColumn: order_id
              # 分片算法行表达式，需符合groovy语法
#              algorithmExpression: t_order$->{order_id % 2}
              algorithmExpression: t_order_20220$->{order_id % 2}
          key-generator:
            column: order_id
            type: SNOWFLAKE

spring.main.allow-bean-definition-overriding: true

# mybatis-plus
mybatis-plus:
  mapper-locations: classpath:/mapper/*.xml
  configuration:
    jdbc-type-for-nul: 'null'
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
